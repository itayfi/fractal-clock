{"version":3,"sources":["SettingsContext.js","components/Checkbox.js","components/Input.js","components/RangeInput.js","components/Select.js","SettingsPanel.js","drawClockFractal.js","Clock.js","App.js","serviceWorker.js","index.js"],"names":["DEFAULT_SETTINGS","hours","minutes","seconds","maxDepth","showFps","color","dropoffMode","SettingsContext","React","createContext","SettingsProvider","children","fromStorage","localStorage","getItem","useState","JSON","parse","settings","setSettings","ctx","useMemo","processed","Object","fromEntries","keys","map","prop","value","onChange","state","raw","useEffect","setItem","stringify","Provider","useSettings","useContext","Checkbox","label","props","onChangeCallback","useCallback","e","target","checked","type","defaultValueGetter","event","Input","valueGetter","valueAsNumber","RangeInput","title","Select","options","onChangeHandler","option","DROPOFF_OPTIONS","SettingsPanel","className","min","max","step","setLineStyle","i","strokeStyle","tinycolor","setAlpha","toRgbString","lineWidth","Math","pow","createFractal","fraction","result","OffscreenCanvas","temp","resultCtx","getContext","tempCtx","transforms","handFractions","now","Date","getSeconds","getMilliseconds","getMinutes","getHours","getTime","hand","push","DOMMatrix","translate","CANVAS_SIZE","scale","rotate","clearRect","transform","setTransform","drawImage","beginPath","moveTo","end","DOMPoint","matrixTransform","lineTo","x","y","stroke","transferToImageBitmap","Clock","canvas","useRef","animationId","nextFrame","timestamp","transferFromImageBitmap","drawClockFractal","current","requestAnimationFrame","cancelAnimationFrame","width","height","ref","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f00deb2e.chunk.js","sourcesContent":["import React from 'react';\n\nconst DEFAULT_SETTINGS = {\n    hours: false,\n    minutes: true,\n    seconds: true,\n    maxDepth: 8,\n    showFps: false,\n    color: '#5cc0ff',\n    dropoffMode: 'exponential'\n}\n\nconst SettingsContext = React.createContext({});\n\nexport function SettingsProvider({children}) {\n    const fromStorage = localStorage.getItem('fractalClockSettings');\n\n    const [settings, setSettings] = React.useState(fromStorage ? JSON.parse(fromStorage) : DEFAULT_SETTINGS);\n\n    const ctx = React.useMemo(() => {\n        const processed = Object.fromEntries(Object.keys(DEFAULT_SETTINGS).map(prop => [\n            prop,\n            {\n                value: settings[prop],\n                onChange(value) {\n                    setSettings(state => ({...state, [prop]: value}));\n                }\n            }\n        ]));\n        return {\n            ...processed,\n            raw: settings\n        };\n    }, [settings, setSettings]);\n\n    React.useEffect(() => {\n        localStorage.setItem('fractalClockSettings', JSON.stringify(settings));\n    }, [settings]);\n\n    return <SettingsContext.Provider value={ctx}>{children}</SettingsContext.Provider>;\n};\n\nexport function useSettings() {\n    return React.useContext(SettingsContext);\n};","import React from 'react';\n\nexport default function Checkbox({value, onChange, label, ...props}) {\n    const onChangeCallback = React.useCallback(e => onChange(e.target.checked), [onChange]);\n\n    return <label>\n        <input checked={value} onChange={onChangeCallback} type=\"checkbox\" {...props} />\n        {label}\n    </label>;\n}","import React from 'react';\n\nfunction defaultValueGetter(event) {\n\treturn event.target.value;\n}\n\nexport default function Input({onChange, label, valueGetter = defaultValueGetter, ...props}) {\n\tconst onChangeCallback = React.useCallback(e => onChange(valueGetter(e)), [onChange, valueGetter]);\n\n\treturn <label>\n\t\t{label}\n\t\t<input onChange={onChangeCallback} {...props} />\n\t</label>;\n}\n","import React from 'react';\n\nimport Input from './Input.js';\n\nfunction valueAsNumber(event) {\n\treturn event.target.valueAsNumber;\n}\n\nexport default function RangeInput({...props}) {\n\treturn <Input type=\"range\" valueGetter={valueAsNumber} title={props.value} {...props} />\n};\n","import React from 'react';\n\nexport default function Select({label, options, value, onChange}) {\n    const onChangeHandler = React.useCallback(e => onChange(e.target.value), [onChange]);\n\n    return <label>\n        {label}\n        <select value={value} onChange={onChangeHandler}>\n            {options.map(option => <option value={option.value}>{option.title}</option>)}\n        </select>\n    </label>;\n}","import React from 'react';\n\nimport './SettingsPanel.css';\n\nimport {useSettings} from './SettingsContext';\nimport Checkbox from './components/Checkbox.js';\nimport Input from './components/Input.js';\nimport RangeInput from './components/RangeInput.js';\nimport Select from './components/Select.js';\n\nconst DROPOFF_OPTIONS = [\n    {value: 'exponential', title: 'Exponential'},\n    {value: 'linear', title: 'Linear'},\n    {value: 'constant', title: 'Constant'}\n];\n\nexport default function SettingsPanel() {\n    const settings = useSettings();\n\n    return <div className=\"settings-panel\">\n        <h3>Fractal Clock</h3>\n        <RangeInput min=\"1\" max=\"15\" step=\"1\" label=\"Max Depth\" {...settings.maxDepth} />\n        <Checkbox label=\"Hours\" {...settings.hours} />\n        <Checkbox label=\"Minutes\" {...settings.minutes} />\n        <Checkbox label=\"Seconds\" {...settings.seconds} />\n        <Input type=\"color\" label=\"Color \" {...settings.color} />\n        <Select label=\"Dropoff Mode \" options={DROPOFF_OPTIONS} {...settings.dropoffMode} />\n        {/*<Checkbox label=\"Show FPS\" {...settings.showFps} />*/}\n    </div>;\n};\n","import tinycolor from 'tinycolor2';\n\nconst CANVAS_SIZE = 666;\nconst SCALE_FACTOR = 0.7;\n\nfunction getTime() {\n    const now = new Date();\n    let seconds = now.getSeconds() + now.getMilliseconds() / 1000;\n    let minutes = now.getMinutes() + seconds / 60;\n    let hours = now.getHours() + minutes / 60;\n\n    return {\n        hours: (hours % 12) / 12,\n        minutes: (minutes % 60) / 60,\n        seconds: (seconds % 60) / 60\n    };\n}\n\nfunction getTransformation(fraction) {\n    return new DOMMatrix()\n        .translate(CANVAS_SIZE / 2, CANVAS_SIZE / 2)\n        .scale(SCALE_FACTOR)\n        .rotate(360 * fraction)\n        .translate(0, -100 / SCALE_FACTOR)\n        .translate(-CANVAS_SIZE / 2, -CANVAS_SIZE / 2);\n}\n\nfunction setLineStyle(ctx, settings, i) {\n    switch (settings.dropoffMode) {\n        case 'linear':\n            ctx.strokeStyle = tinycolor(settings.color).setAlpha(i / settings.maxDepth).toRgbString();\n        case 'constant':\n            ctx.lineWidth = Math.pow(SCALE_FACTOR, i - settings.maxDepth);\n            break;\n    }\n}\n\nfunction createFractal(settings) {\n    let result = new OffscreenCanvas(CANVAS_SIZE, CANVAS_SIZE);\n    let temp = new OffscreenCanvas(CANVAS_SIZE, CANVAS_SIZE);\n    let resultCtx = result.getContext('2d');\n    let tempCtx = temp.getContext('2d');\n\n    let transforms = [];\n    let handFractions = getTime();\n    for (let hand in handFractions) {\n        if (settings[hand]) {\n            transforms.push(getTransformation(handFractions[hand]));\n        }\n    }\n\n    tempCtx.strokeStyle = settings.color;\n    for (let i = 0; i < settings.maxDepth; i++) {\n        tempCtx.clearRect(0, 0, CANVAS_SIZE, CANVAS_SIZE);\n        for (let transform of transforms) {\n            tempCtx.setTransform(transform);\n            tempCtx.drawImage(result, 0, 0);\n        }\n        tempCtx.setTransform(new DOMMatrix());\n        setLineStyle(tempCtx, settings, i);\n        tempCtx.beginPath();\n        for (let transform of transforms) {\n            tempCtx.moveTo(CANVAS_SIZE / 2, CANVAS_SIZE / 2);\n            let end = new DOMPoint(CANVAS_SIZE / 2, CANVAS_SIZE / 2).matrixTransform(transform);\n            tempCtx.lineTo(end.x, end.y);\n        }\n        tempCtx.stroke();\n        resultCtx.clearRect(0, 0, CANVAS_SIZE, CANVAS_SIZE);\n        resultCtx.drawImage(temp, 0, 0);\n    }\n\n    return result.transferToImageBitmap();\n}\n\nexport default function drawClockFractal(timestamp, canvas, settings) {\n    const ctx = canvas.getContext('bitmaprenderer');\n\n    ctx.transferFromImageBitmap(createFractal(settings));\n};\n","import React from 'react';\n\nimport {useSettings} from './SettingsContext.js';\nimport drawClockFractal from './drawClockFractal.js';\n\nimport './Clock.css';\n\nexport default function Clock() {\n    const {raw: settings} = useSettings();\n    const canvas = React.useRef();\n\n    React.useEffect(() => {\n        let animationId;\n\n        function nextFrame(timestamp) {\n            drawClockFractal(timestamp, canvas.current, settings);\n            animationId = requestAnimationFrame(nextFrame);\n        }\n        nextFrame();\n\n        return () => cancelAnimationFrame(animationId);\n    }, [settings]);\n\n    return <div className=\"clock-container\">\n        <canvas width=\"666\" height=\"666\" ref={canvas} />\n    </div>;\n}","import React from 'react';\nimport './App.css';\n\nimport {SettingsProvider} from './SettingsContext.js';\nimport SettingsPanel from './SettingsPanel.js';\nimport Clock from './Clock.js';\n\nfunction App() {\n  return (\n    <SettingsProvider>\n      <div className=\"App\">\n        <SettingsPanel />\n        <Clock />\n      </div>\n    </SettingsProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}